<template>
  <div class="grid grid-cols-1 text-left justify-normal">
    <div class="col-span-5 xl:col-span-3 my-5 text-left">
      <div
        class="rounded-sm border border-stroke bg-white dark:border-strokedark dark:bg-boxdark"
      >
        <div class="flex-row">
          <el-alert
            v-if="mainError"
            :title="$t('messages.save_error')"
            type="error"
            :description="mainError"
            show-icon
          />
        </div>

        <div class="p-7">
          <el-form @submit.prevent="save" :model="form" label-position="top">
            {{ inputFields }}
            <!-- Save and Cancel Buttons -->
            <div class="flex justify-end gap-0">
              <el-button :loading="loading" @click.prevent="cancel" type="danger" plain>{{ $t('common.cancel') }}</el-button>
              <el-button :loading="loading" @click.prevent="save" type="primary" plain>{{ $t('common.save') }}</el-button>
            </div>
          </el-form>
        </div>
      </div>
    </div>
  </div>
</template>

<script>
{{ axiosImport }}
import InputGroup from '@/components/Common/InputGroup.vue'
import FormError from '@/components/Common/FormError.vue'

export default {
  name: '{{ componentName }}',
  data() {
    return {
      form: {
        {{ formInputVariables }}
      },
      id: null,
      loading: false,
      mainError: null,
      validationErrors: [],
      isEditing: false,
      {{ relationshipDataVariables }}
    }
  },
  methods: {
    save() {
      var self = this
      const payload = { ...this.form }
      
      if (this.isEditing) {
        payload.id = this.id
      }

      {{ axiosInstance }}.post(`{{ endpoint }}`, payload).then(() => {
        self.loading = false
        self.$message({type: 'success', message: self.$t('messages.save_success')})
      }).catch((e) => {
        self.$message({type: 'error', message: self.$t('messages.save_error')})
        self.loading = false
        if (e.response.status === 422) {
          // self.validationErrors = e.response.data.errors
        }
      })
    },
    cancel() {
      // TODO: Implement cancel logic
    },
    // Fetch relationship data
    {{ relationshipDataFetchers }}
  },
  mounted() {
    // Load relationship data
    {{ relationshipDataFetcherMethodCalls }}

    if (this.$route.query.id) {
      this.id = this.$route.query.id
      this.fetchItem()
    }
  },
  components: {
    InputGroup,
    FormError
  }
}
</script>